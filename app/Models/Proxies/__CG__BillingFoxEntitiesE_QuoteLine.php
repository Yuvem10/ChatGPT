<?php

namespace DoctrineProxies\__CG__\BillingFox\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class E_QuoteLine extends \BillingFox\Entities\E_QuoteLine implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'children', 'lineType', 'content', 'referenceLabel', 'productName', 'code', 'days', 'daysTotal', 'timeType', 'basePrice', 'basePriceTotal', 'priceType', 'quantity', 'costPrice', 'unitPrice', 'totalPrice', 'locked', 'discount', 'lineOrder', 'quantityUnit', 'deliveredQuantity', 'deliveryProblemType', 'deliveryProblemComment', 'VATValue', 'VATType', 'quote', 'parent', 'productReference', 'nullableProperties'];
        }

        return ['__isInitialized__', 'id', 'children', 'lineType', 'content', 'referenceLabel', 'productName', 'code', 'days', 'daysTotal', 'timeType', 'basePrice', 'basePriceTotal', 'priceType', 'quantity', 'costPrice', 'unitPrice', 'totalPrice', 'locked', 'discount', 'lineOrder', 'quantityUnit', 'deliveredQuantity', 'deliveryProblemType', 'deliveryProblemComment', 'VATValue', 'VATType', 'quote', 'parent', 'productReference', 'nullableProperties'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (E_QuoteLine $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function update($params)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', [$params]);

        return parent::update($params);
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuote', []);

        return parent::getQuote();
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', []);

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function getLineType(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLineType', []);

        return parent::getLineType();
    }

    /**
     * {@inheritDoc}
     */
    public function getContent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', []);

        return parent::getContent();
    }

    /**
     * {@inheritDoc}
     */
    public function getProductReference()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductReference', []);

        return parent::getProductReference();
    }

    /**
     * {@inheritDoc}
     */
    public function getReferenceLabel(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReferenceLabel', []);

        return parent::getReferenceLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function getProductName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductName', []);

        return parent::getProductName();
    }

    /**
     * {@inheritDoc}
     */
    public function getCode(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getDays($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDays', [$roundValue]);

        return parent::getDays($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getDaysTotal($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDaysTotal', [$roundValue]);

        return parent::getDaysTotal($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimeType($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimeType', [$roundValue]);

        return parent::getTimeType($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getBasePrice($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBasePrice', [$roundValue]);

        return parent::getBasePrice($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getBasePriceTotal($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBasePriceTotal', [$roundValue]);

        return parent::getBasePriceTotal($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriceType($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriceType', [$roundValue]);

        return parent::getPriceType($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuantity($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuantity', [$roundValue]);

        return parent::getQuantity($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getCostPrice($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCostPrice', [$roundValue]);

        return parent::getCostPrice($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitPrice($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnitPrice', [$roundValue]);

        return parent::getUnitPrice($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalPrice($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalPrice', [$roundValue]);

        return parent::getTotalPrice($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function isLocked(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isLocked', []);

        return parent::isLocked();
    }

    /**
     * {@inheritDoc}
     */
    public function getDiscount($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiscount', [$roundValue]);

        return parent::getDiscount($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getLineOrder(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLineOrder', []);

        return parent::getLineOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuantityUnit($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuantityUnit', [$roundValue]);

        return parent::getQuantityUnit($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeliveredQuantity(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeliveredQuantity', []);

        return parent::getDeliveredQuantity();
    }

    /**
     * {@inheritDoc}
     */
    public function addDeliveredQuantity(float $quantity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDeliveredQuantity', [$quantity]);

        return parent::addDeliveredQuantity($quantity);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeliveryProblemType(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeliveryProblemType', []);

        return parent::getDeliveryProblemType();
    }

    /**
     * {@inheritDoc}
     */
    public function getDeliveryProblemComment(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeliveryProblemComment', []);

        return parent::getDeliveryProblemComment();
    }

    /**
     * {@inheritDoc}
     */
    public function getVATValue($roundValue = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVATValue', [$roundValue]);

        return parent::getVATValue($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getVATType(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVATType', []);

        return parent::getVATType();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuoteRecursively($quote)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuoteRecursively', [$quote]);

        return parent::setQuoteRecursively($quote);
    }

    /**
     * {@inheritDoc}
     */
    public function getProperties()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperties', []);

        return parent::getProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function updateNullablePropertiesArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateNullablePropertiesArray', []);

        return parent::updateNullablePropertiesArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getProperty($propName, $asArray = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperty', [$propName, $asArray]);

        return parent::getProperty($propName, $asArray);
    }

    /**
     * {@inheritDoc}
     */
    public function setDateProperty($propName, $dateString)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateProperty', [$propName, $dateString]);

        return parent::setDateProperty($propName, $dateString);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function generateTargetEntityString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'generateTargetEntityString', []);

        return parent::generateTargetEntityString();
    }

    /**
     * {@inheritDoc}
     */
    public function getMandatoryProperties(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMandatoryProperties', []);

        return parent::getMandatoryProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function checkForMissingFields(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkForMissingFields', []);

        return parent::checkForMissingFields();
    }

}
