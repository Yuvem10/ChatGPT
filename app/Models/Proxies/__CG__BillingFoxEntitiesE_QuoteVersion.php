<?php

namespace DoctrineProxies\__CG__\BillingFox\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class E_QuoteVersion extends \BillingFox\Entities\E_QuoteVersion implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'comment', 'tnc', 'validityPeriod', 'hourlyRate', 'coefficient', 'discount', 'proRata', 'travelExpenses', 'computedHourlyRate', 'computedCoefficient', 'discountAmount', 'workforceHours', 'hoursCost', 'purchases', 'sales', 'workforceSharePercent', 'purchasesSharePercent', 'costPrice', 'grossMargin', 'totalAmount', 'versionName', 'versionComment', 'versionSentTo', 'versionDate', 'lastSyncDate', 'quote', 'lines', 'nullableProperties'];
        }

        return ['__isInitialized__', 'id', 'comment', 'tnc', 'validityPeriod', 'hourlyRate', 'coefficient', 'discount', 'proRata', 'travelExpenses', 'computedHourlyRate', 'computedCoefficient', 'discountAmount', 'workforceHours', 'hoursCost', 'purchases', 'sales', 'workforceSharePercent', 'purchasesSharePercent', 'costPrice', 'grossMargin', 'totalAmount', 'versionName', 'versionComment', 'versionSentTo', 'versionDate', 'lastSyncDate', 'quote', 'lines', 'nullableProperties'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (E_QuoteVersion $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getComment(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComment', []);

        return parent::getComment();
    }

    /**
     * {@inheritDoc}
     */
    public function getTnc(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTnc', []);

        return parent::getTnc();
    }

    /**
     * {@inheritDoc}
     */
    public function getValidityPeriod(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValidityPeriod', []);

        return parent::getValidityPeriod();
    }

    /**
     * {@inheritDoc}
     */
    public function getHourlyRate(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHourlyRate', []);

        return parent::getHourlyRate();
    }

    /**
     * {@inheritDoc}
     */
    public function getCoefficient(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCoefficient', []);

        return parent::getCoefficient();
    }

    /**
     * {@inheritDoc}
     */
    public function getDiscount(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiscount', []);

        return parent::getDiscount();
    }

    /**
     * {@inheritDoc}
     */
    public function getProRata(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProRata', []);

        return parent::getProRata();
    }

    /**
     * {@inheritDoc}
     */
    public function getTravelExpenses(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTravelExpenses', []);

        return parent::getTravelExpenses();
    }

    /**
     * {@inheritDoc}
     */
    public function getComputedHourlyRate(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComputedHourlyRate', []);

        return parent::getComputedHourlyRate();
    }

    /**
     * {@inheritDoc}
     */
    public function getComputedCoefficient(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComputedCoefficient', []);

        return parent::getComputedCoefficient();
    }

    /**
     * {@inheritDoc}
     */
    public function getDiscountAmount(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiscountAmount', []);

        return parent::getDiscountAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkforceHours(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkforceHours', []);

        return parent::getWorkforceHours();
    }

    /**
     * {@inheritDoc}
     */
    public function getHoursCost(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHoursCost', []);

        return parent::getHoursCost();
    }

    /**
     * {@inheritDoc}
     */
    public function getPurchases(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurchases', []);

        return parent::getPurchases();
    }

    /**
     * {@inheritDoc}
     */
    public function getSales(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSales', []);

        return parent::getSales();
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkforceSharePercent(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkforceSharePercent', []);

        return parent::getWorkforceSharePercent();
    }

    /**
     * {@inheritDoc}
     */
    public function getPurchasesSharePercent(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurchasesSharePercent', []);

        return parent::getPurchasesSharePercent();
    }

    /**
     * {@inheritDoc}
     */
    public function getCostPrice(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCostPrice', []);

        return parent::getCostPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function getGrossMargin(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGrossMargin', []);

        return parent::getGrossMargin();
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalAmount(): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalAmount', []);

        return parent::getTotalAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuote', []);

        return parent::getQuote();
    }

    /**
     * {@inheritDoc}
     */
    public function getLines()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLines', []);

        return parent::getLines();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersionName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersionName', []);

        return parent::getVersionName();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersionComment(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersionComment', []);

        return parent::getVersionComment();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersionSentTo(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersionSentTo', []);

        return parent::getVersionSentTo();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersionDate(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersionDate', []);

        return parent::getVersionDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastSyncDate(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastSyncDate', []);

        return parent::getLastSyncDate();
    }

    /**
     * {@inheritDoc}
     */
    public function update($params)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', [$params]);

        return parent::update($params);
    }

    /**
     * {@inheritDoc}
     */
    public function getProperties()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperties', []);

        return parent::getProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function updateNullablePropertiesArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateNullablePropertiesArray', []);

        return parent::updateNullablePropertiesArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getProperty($propName, $asArray = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperty', [$propName, $asArray]);

        return parent::getProperty($propName, $asArray);
    }

    /**
     * {@inheritDoc}
     */
    public function setDateProperty($propName, $dateString)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateProperty', [$propName, $dateString]);

        return parent::setDateProperty($propName, $dateString);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function generateTargetEntityString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'generateTargetEntityString', []);

        return parent::generateTargetEntityString();
    }

    /**
     * {@inheritDoc}
     */
    public function getMandatoryProperties(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMandatoryProperties', []);

        return parent::getMandatoryProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function checkForMissingFields(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkForMissingFields', []);

        return parent::checkForMissingFields();
    }

}
