<?php

namespace DoctrineProxies\__CG__\BillingFox\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class E_Quote extends \BillingFox\Entities\E_Quote implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'chronoNumber', 'title', 'subtitle', 'client', 'comment', 'tnc', 'validityPeriod', 'creationDate', 'updateDate', 'deliveryDate', 'lastSyncDate', 'status', 'hourlyRate', 'coefficient', 'discount', 'tradeDiscount', 'tradeDiscountType', 'proRata', 'travelExpenses', 'computedHourlyRate', 'computedCoefficient', 'discountAmount', 'workforceHours', 'hoursCost', 'purchases', 'sales', 'workforceSharePercent', 'purchasesSharePercent', 'costPrice', 'grossMargin', 'totalAmount', 'entityType', 'currency', 'referenceNumber', 'referenceDate', 'author', 'businessManager', 'currentVersion', 'versions', 'lines', 'referenceQuote', 'buyer', 'buyerPerson', 'seller', 'sellerPerson', 'business', 'nullableProperties'];
        }

        return ['__isInitialized__', 'id', 'chronoNumber', 'title', 'subtitle', 'client', 'comment', 'tnc', 'validityPeriod', 'creationDate', 'updateDate', 'deliveryDate', 'lastSyncDate', 'status', 'hourlyRate', 'coefficient', 'discount', 'tradeDiscount', 'tradeDiscountType', 'proRata', 'travelExpenses', 'computedHourlyRate', 'computedCoefficient', 'discountAmount', 'workforceHours', 'hoursCost', 'purchases', 'sales', 'workforceSharePercent', 'purchasesSharePercent', 'costPrice', 'grossMargin', 'totalAmount', 'entityType', 'currency', 'referenceNumber', 'referenceDate', 'author', 'businessManager', 'currentVersion', 'versions', 'lines', 'referenceQuote', 'buyer', 'buyerPerson', 'seller', 'sellerPerson', 'business', 'nullableProperties'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (E_Quote $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function update($params)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', [$params]);

        return parent::update($params);
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getChronoNumber(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChronoNumber', []);

        return parent::getChronoNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getSubtitle(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubtitle', []);

        return parent::getSubtitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getClient(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClient', []);

        return parent::getClient();
    }

    /**
     * {@inheritDoc}
     */
    public function getComment(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComment', []);

        return parent::getComment();
    }

    /**
     * {@inheritDoc}
     */
    public function getTnc(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTnc', []);

        return parent::getTnc();
    }

    /**
     * {@inheritDoc}
     */
    public function getValidityPeriod(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValidityPeriod', []);

        return parent::getValidityPeriod();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationDate(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationDate', []);

        return parent::getCreationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateDate(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateDate', []);

        return parent::getUpdateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastSyncDate(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastSyncDate', []);

        return parent::getLastSyncDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function getHourlyRate(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHourlyRate', [$roundValue]);

        return parent::getHourlyRate($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getCoefficient(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCoefficient', [$roundValue]);

        return parent::getCoefficient($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getRealSalesCoefficient(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRealSalesCoefficient', [$roundValue]);

        return parent::getRealSalesCoefficient($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getComputedCoefficientCalculus(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComputedCoefficientCalculus', []);

        return parent::getComputedCoefficientCalculus();
    }

    /**
     * {@inheritDoc}
     */
    public function getComputedHourlyRateCalculus(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComputedHourlyRateCalculus', []);

        return parent::getComputedHourlyRateCalculus();
    }

    /**
     * {@inheritDoc}
     */
    public function getDiscount(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiscount', [$roundValue]);

        return parent::getDiscount($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getProRata(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProRata', [$roundValue]);

        return parent::getProRata($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getProRataAmount(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProRataAmount', [$roundValue, $formatted]);

        return parent::getProRataAmount($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getTravelExpenses(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTravelExpenses', [$roundValue]);

        return parent::getTravelExpenses($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssemblyTotals(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssemblyTotals', [$roundValue]);

        return parent::getAssemblyTotals($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getComputedHourlyRate(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComputedHourlyRate', [$roundValue]);

        return parent::getComputedHourlyRate($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getComputedCoefficient(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComputedCoefficient', [$roundValue]);

        return parent::getComputedCoefficient($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getDiscountAmount(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiscountAmount', [$roundValue, $formatted]);

        return parent::getDiscountAmount($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkforceHours(bool $roundValue = false, $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkforceHours', [$roundValue, $formatted]);

        return parent::getWorkforceHours($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getHoursCost(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHoursCost', [$roundValue, $formatted]);

        return parent::getHoursCost($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getPurchases(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurchases', [$roundValue, $formatted]);

        return parent::getPurchases($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getSales(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSales', [$roundValue, $formatted]);

        return parent::getSales($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getSalesWithTradeDiscount(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalesWithTradeDiscount', [$roundValue, $formatted]);

        return parent::getSalesWithTradeDiscount($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getNetSales(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNetSales', [$roundValue, $formatted]);

        return parent::getNetSales($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkforceSharePercent(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkforceSharePercent', [$roundValue]);

        return parent::getWorkforceSharePercent($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getPurchasesSharePercent(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPurchasesSharePercent', [$roundValue]);

        return parent::getPurchasesSharePercent($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getCostPrice(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCostPrice', [$roundValue, $formatted]);

        return parent::getCostPrice($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getGrossMargin(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGrossMargin', [$roundValue, $formatted]);

        return parent::getGrossMargin($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getGrossMarginWithTradeDiscount(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGrossMarginWithTradeDiscount', [$roundValue, $formatted]);

        return parent::getGrossMarginWithTradeDiscount($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getNetMargin(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNetMargin', [$roundValue, $formatted]);

        return parent::getNetMargin($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalAmount(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalAmount', [$roundValue]);

        return parent::getTotalAmount($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', []);

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function getBusinessManager()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBusinessManager', []);

        return parent::getBusinessManager();
    }

    /**
     * {@inheritDoc}
     */
    public function getLines()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLines', []);

        return parent::getLines();
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentVersion', []);

        return parent::getCurrentVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersions', []);

        return parent::getVersions();
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityType(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityType', []);

        return parent::getEntityType();
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrency(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrency', []);

        return parent::getCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function getReferenceQuote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReferenceQuote', []);

        return parent::getReferenceQuote();
    }

    /**
     * {@inheritDoc}
     */
    public function getBuyer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBuyer', []);

        return parent::getBuyer();
    }

    /**
     * {@inheritDoc}
     */
    public function getSeller()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSeller', []);

        return parent::getSeller();
    }

    /**
     * {@inheritDoc}
     */
    public function getBusiness()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBusiness', []);

        return parent::getBusiness();
    }

    /**
     * {@inheritDoc}
     */
    public function getBuyerPerson()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBuyerPerson', []);

        return parent::getBuyerPerson();
    }

    /**
     * {@inheritDoc}
     */
    public function getSellerPerson()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSellerPerson', []);

        return parent::getSellerPerson();
    }

    /**
     * {@inheritDoc}
     */
    public function setLines(\Doctrine\Common\Collections\Collection $lines): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLines', [$lines]);

        parent::setLines($lines);
    }

    /**
     * {@inheritDoc}
     */
    public function getTradeDiscount(bool $roundValue = false): float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTradeDiscount', [$roundValue]);

        return parent::getTradeDiscount($roundValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getTradeDiscountType(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTradeDiscountType', []);

        return parent::getTradeDiscountType();
    }

    /**
     * {@inheritDoc}
     */
    public function getTradeDiscountAmount(bool $roundValue = false, bool $formatted = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTradeDiscountAmount', [$roundValue, $formatted]);

        return parent::getTradeDiscountAmount($roundValue, $formatted);
    }

    /**
     * {@inheritDoc}
     */
    public function getReferenceNumber(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReferenceNumber', []);

        return parent::getReferenceNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function getReferenceDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReferenceDate', []);

        return parent::getReferenceDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getDeliveryDate(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeliveryDate', []);

        return parent::getDeliveryDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getProperties()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperties', []);

        return parent::getProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function updateNullablePropertiesArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateNullablePropertiesArray', []);

        return parent::updateNullablePropertiesArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getProperty($propName, $asArray = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperty', [$propName, $asArray]);

        return parent::getProperty($propName, $asArray);
    }

    /**
     * {@inheritDoc}
     */
    public function setDateProperty($propName, $dateString)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateProperty', [$propName, $dateString]);

        return parent::setDateProperty($propName, $dateString);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function generateTargetEntityString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'generateTargetEntityString', []);

        return parent::generateTargetEntityString();
    }

    /**
     * {@inheritDoc}
     */
    public function getMandatoryProperties(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMandatoryProperties', []);

        return parent::getMandatoryProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function checkForMissingFields(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkForMissingFields', []);

        return parent::checkForMissingFields();
    }

}
